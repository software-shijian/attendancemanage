package com.attendance.manage.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.attendance.manage.dao.RoleAuthorityMapper;
import com.attendance.manage.dao.RoleMapper;
import com.attendance.manage.dao.StuffMapper;
import com.attendance.manage.dao.StuffRoleMapper;
import com.attendance.manage.model.Stuff;
import com.attendance.manage.model.StuffRole;
import com.attendance.manage.service.StuffService;

@Service
public class StuffServiceImpl implements StuffService {
	@Autowired
	private StuffMapper stuffDao;
	@Autowired
	private RoleMapper roleDao;
	@Autowired
	private StuffRoleMapper stuffRoleDao;
	@Autowired
	private RoleAuthorityMapper roleAuthorityDao;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table stuff
	 * 
	 * @mbggenerated
	 */
	public int deleteByPrimaryKey(Long id) {
		return stuffDao.deleteByPrimaryKey(id);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table stuff
	 * 
	 * @mbggenerated
	 */
	public int insert(Stuff record) {
		return stuffDao.insert(record);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table stuff
	 * 
	 * @mbggenerated
	 */
	public Stuff selectByPrimaryKey(Long id) {
		return stuffDao.selectByPrimaryKey(id);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table stuff
	 * 
	 * @mbggenerated
	 */
	public List<Stuff> selectAll() {
		return stuffDao.selectAll();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table stuff
	 * 
	 * @mbggenerated
	 */
	public int updateByPrimaryKey(Stuff record) {
		return stuffDao.updateByPrimaryKey(record);
	}

	public boolean usernameExists(String username) {
		if (null != stuffDao.findByUsername(username)) {
			return true;
		}
		return false;
	}

	public Stuff findByUsername(String username) {
		return stuffDao.findByUsername(username);
	}

	@Transactional(readOnly = true)
	public List<String> findAuthorities(Long id) {
		List<String> authorities = new ArrayList<String>();
		Stuff stuff = stuffDao.selectByPrimaryKey(id);
		List<Long> roles = new ArrayList<Long>();
		List<StuffRole> stuffRoles = stuffRoleDao.selectAll();
		if (stuff != null) {
			for (StuffRole stuffRole : stuffRoles) {
				if (stuffRole.getId() == stuff.getId()) {
					roles.add(stuffRole.getRole());
				}
			}
			for (Long role : roles) {
				authorities.addAll(roleAuthorityDao.findByRole(role));
			}
		}

		return authorities;
	}
}